-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity processor_do_process is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instr_memory_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    instr_memory_ce0 : OUT STD_LOGIC;
    instr_memory_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_memory_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_memory_ce0 : OUT STD_LOGIC;
    data_memory_we0 : OUT STD_LOGIC;
    data_memory_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_memory_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of processor_do_process is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_67 : STD_LOGIC_VECTOR (6 downto 0) := "1100111";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv7_23 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_31FFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000110001111111111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv7_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_const_lv7_13 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_const_lv7_73 : STD_LOGIC_VECTOR (6 downto 0) := "1110011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv26_C7FF : STD_LOGIC_VECTOR (25 downto 0) := "00000000001100011111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal g_pc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_error : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal g_xreg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_xreg_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal result_12_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal op_code_reg_1651 : STD_LOGIC_VECTOR (6 downto 0);
    signal pc_reg_1635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln26_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_reg_1642 : STD_LOGIC_VECTOR (0 downto 0);
    signal op_code_fu_559_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal funct3_fu_563_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal funct3_reg_1656 : STD_LOGIC_VECTOR (2 downto 0);
    signal funct7_reg_1662 : STD_LOGIC_VECTOR (6 downto 0);
    signal rd_reg_1667 : STD_LOGIC_VECTOR (4 downto 0);
    signal immediate_9_fu_853_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal immediate_9_reg_1671 : STD_LOGIC_VECTOR (31 downto 0);
    signal source1_fu_1010_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal source1_reg_1681 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_13_fu_1087_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_13_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln187_2_fu_1160_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln187_2_reg_1730 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln188_fu_1269_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln188_reg_1735 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_3_fu_1303_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal pos_3_reg_1746 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_execute_load_fu_456_ap_start : STD_LOGIC;
    signal grp_execute_load_fu_456_ap_done : STD_LOGIC;
    signal grp_execute_load_fu_456_ap_idle : STD_LOGIC;
    signal grp_execute_load_fu_456_ap_ready : STD_LOGIC;
    signal grp_execute_load_fu_456_data_memory_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_execute_load_fu_456_data_memory_ce0 : STD_LOGIC;
    signal grp_execute_load_fu_456_g_error : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_execute_load_fu_456_g_error_ap_vld : STD_LOGIC;
    signal grp_execute_load_fu_456_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret6_execute_arithm_fu_468_ap_ready : STD_LOGIC;
    signal call_ret6_execute_arithm_fu_468_g_error : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret6_execute_arithm_fu_468_g_error_ap_vld : STD_LOGIC;
    signal call_ret6_execute_arithm_fu_468_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret6_execute_arithm_fu_468_ap_return_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_result_77_phi_fu_336_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_result_77_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_result_77_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_6_fu_1427_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_7_fu_1411_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_fu_1395_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_fu_1379_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_10_fu_1363_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_11_fu_1347_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_result_12_phi_fu_366_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_result_12_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_result_12_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_write_reg_1_phi_fu_388_p12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_write_reg_1_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_write_reg_1_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_write_mem_phi_fu_413_p12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_write_mem_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_write_mem_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_write_addr_1_reg_433 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_write_addr_1_reg_433 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_execute_load_fu_456_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_fu_1313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln405_fu_1626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln193_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_fu_516_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln26_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_1_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_526_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal immediate_fu_593_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_617_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_607_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal immediate_1_fu_627_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_667_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_659_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_649_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_639_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal immediate_2_fu_675_p6 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_693_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_14_fu_729_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_711_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln39_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln418_1_fu_689_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal immediate_4_fu_739_p6 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln39_1_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln418_fu_635_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal immediate_5_fu_759_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal immediate_6_fu_773_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln39_2_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_3_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal immediate_3_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln418_2_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_4_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_5_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_6_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_7_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_2_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_3_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln45_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal immediate_7_fu_803_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal source1_fu_1010_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_13_fu_1087_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln71_fu_1083_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln418_fu_862_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln187_fu_1196_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln187_fu_1199_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln187_1_fu_1205_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln187_fu_1202_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln187_1_fu_1218_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln187_fu_1208_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln187_2_fu_1214_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln188_fu_1242_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t_fu_1248_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln188_1_fu_1256_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_1262_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal pos_fu_1224_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln215_fu_1344_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln213_fu_1360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln208_fu_1376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln206_fu_1392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln204_fu_1408_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln202_fu_1424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_232 : BOOLEAN;
    signal ap_condition_215 : BOOLEAN;
    signal ap_condition_159 : BOOLEAN;
    signal ap_condition_308 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component processor_execute_load IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        funct3_val : IN STD_LOGIC_VECTOR (2 downto 0);
        imm_val : IN STD_LOGIC_VECTOR (31 downto 0);
        data_memory_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_memory_ce0 : OUT STD_LOGIC;
        data_memory_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        source1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        g_error : OUT STD_LOGIC_VECTOR (0 downto 0);
        g_error_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component processor_execute_arithm IS
    port (
        ap_ready : OUT STD_LOGIC;
        op_code_val : IN STD_LOGIC_VECTOR (6 downto 0);
        funct3_val : IN STD_LOGIC_VECTOR (2 downto 0);
        funct7_val : IN STD_LOGIC_VECTOR (6 downto 0);
        source1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        source2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        imm_val : IN STD_LOGIC_VECTOR (31 downto 0);
        pc_val : IN STD_LOGIC_VECTOR (31 downto 0);
        g_error : OUT STD_LOGIC_VECTOR (0 downto 0);
        g_error_ap_vld : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component processor_mux_32_5_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_execute_load_fu_456 : component processor_execute_load
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_execute_load_fu_456_ap_start,
        ap_done => grp_execute_load_fu_456_ap_done,
        ap_idle => grp_execute_load_fu_456_ap_idle,
        ap_ready => grp_execute_load_fu_456_ap_ready,
        funct3_val => funct3_reg_1656,
        imm_val => immediate_9_reg_1671,
        data_memory_address0 => grp_execute_load_fu_456_data_memory_address0,
        data_memory_ce0 => grp_execute_load_fu_456_data_memory_ce0,
        data_memory_q0 => data_memory_q0,
        source1_val => source1_reg_1681,
        g_error => grp_execute_load_fu_456_g_error,
        g_error_ap_vld => grp_execute_load_fu_456_g_error_ap_vld,
        ap_return => grp_execute_load_fu_456_ap_return);

    call_ret6_execute_arithm_fu_468 : component processor_execute_arithm
    port map (
        ap_ready => call_ret6_execute_arithm_fu_468_ap_ready,
        op_code_val => op_code_reg_1651,
        funct3_val => funct3_reg_1656,
        funct7_val => funct7_reg_1662,
        source1_val => source1_reg_1681,
        source2_val => result_13_reg_1690,
        imm_val => immediate_9_reg_1671,
        pc_val => pc_reg_1635,
        g_error => call_ret6_execute_arithm_fu_468_g_error,
        g_error_ap_vld => call_ret6_execute_arithm_fu_468_g_error_ap_vld,
        ap_return_0 => call_ret6_execute_arithm_fu_468_ap_return_0,
        ap_return_1 => call_ret6_execute_arithm_fu_468_ap_return_1);

    mux_32_5_32_1_1_U14 : component processor_mux_32_5_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => g_xreg_1,
        din2 => g_xreg_2,
        din3 => g_xreg_3,
        din4 => g_xreg_4,
        din5 => g_xreg_5,
        din6 => g_xreg_6,
        din7 => g_xreg_7,
        din8 => g_xreg_8,
        din9 => g_xreg_9,
        din10 => g_xreg_10,
        din11 => g_xreg_11,
        din12 => g_xreg_12,
        din13 => g_xreg_13,
        din14 => g_xreg_14,
        din15 => g_xreg_15,
        din16 => g_xreg_16,
        din17 => g_xreg_17,
        din18 => g_xreg_18,
        din19 => g_xreg_19,
        din20 => g_xreg_20,
        din21 => g_xreg_21,
        din22 => g_xreg_22,
        din23 => g_xreg_23,
        din24 => g_xreg_24,
        din25 => g_xreg_25,
        din26 => g_xreg_26,
        din27 => g_xreg_27,
        din28 => g_xreg_28,
        din29 => g_xreg_29,
        din30 => g_xreg_30,
        din31 => g_xreg_31,
        din32 => source1_fu_1010_p33,
        dout => source1_fu_1010_p34);

    mux_32_5_32_1_1_U15 : component processor_mux_32_5_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => g_xreg_1,
        din2 => g_xreg_2,
        din3 => g_xreg_3,
        din4 => g_xreg_4,
        din5 => g_xreg_5,
        din6 => g_xreg_6,
        din7 => g_xreg_7,
        din8 => g_xreg_8,
        din9 => g_xreg_9,
        din10 => g_xreg_10,
        din11 => g_xreg_11,
        din12 => g_xreg_12,
        din13 => g_xreg_13,
        din14 => g_xreg_14,
        din15 => g_xreg_15,
        din16 => g_xreg_16,
        din17 => g_xreg_17,
        din18 => g_xreg_18,
        din19 => g_xreg_19,
        din20 => g_xreg_20,
        din21 => g_xreg_21,
        din22 => g_xreg_22,
        din23 => g_xreg_23,
        din24 => g_xreg_24,
        din25 => g_xreg_25,
        din26 => g_xreg_26,
        din27 => g_xreg_27,
        din28 => g_xreg_28,
        din29 => g_xreg_29,
        din30 => g_xreg_30,
        din31 => g_xreg_31,
        din32 => result_13_fu_1087_p33,
        dout => result_13_fu_1087_p34);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    g_pc_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                g_pc <= ap_const_lv32_0;
            else
                if (((not((op_code_reg_1651 = ap_const_lv7_63)) and not((op_code_reg_1651 = ap_const_lv7_3)) and not((op_code_reg_1651 = ap_const_lv7_23)) and not((op_code_reg_1651 = ap_const_lv7_6F)) and not((op_code_reg_1651 = ap_const_lv7_67)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_23)))) then 
                    g_pc <= grp_fu_497_p2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_6F))) then 
                    g_pc <= grp_fu_493_p2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_67))) then 
                    g_pc <= grp_fu_502_p2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_63))) then 
                    g_pc <= ap_phi_reg_pp0_iter0_storemerge_reg_324;
                end if; 
            end if;
        end if;
    end process;


    grp_execute_load_fu_456_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_execute_load_fu_456_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (op_code_fu_559_p1 = ap_const_lv7_3))) then 
                    grp_execute_load_fu_456_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_execute_load_fu_456_ap_ready = ap_const_logic_1)) then 
                    grp_execute_load_fu_456_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_storemerge_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_159)) then
                if ((ap_const_boolean_1 = ap_condition_215)) then 
                    ap_phi_reg_pp0_iter0_storemerge_reg_324 <= grp_fu_493_p2;
                elsif ((ap_const_boolean_1 = ap_condition_232)) then 
                    ap_phi_reg_pp0_iter0_storemerge_reg_324 <= grp_fu_497_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_result_12_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_6F)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_67)))) then 
                ap_phi_reg_pp0_iter1_result_12_reg_361 <= grp_fu_497_p2;
            elsif ((not((op_code_reg_1651 = ap_const_lv7_63)) and not((op_code_reg_1651 = ap_const_lv7_3)) and not((op_code_reg_1651 = ap_const_lv7_23)) and not((op_code_reg_1651 = ap_const_lv7_6F)) and not((op_code_reg_1651 = ap_const_lv7_67)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_result_12_reg_361 <= call_ret6_execute_arithm_fu_468_ap_return_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_result_12_reg_361 <= ap_phi_reg_pp0_iter0_result_12_reg_361;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_write_addr_1_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_code_reg_1651 = ap_const_lv7_23))) then 
                ap_phi_reg_pp0_iter1_write_addr_1_reg_433 <= pos_3_reg_1746;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_write_addr_1_reg_433 <= ap_phi_reg_pp0_iter0_write_addr_1_reg_433;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_write_mem_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_code_reg_1651 = ap_const_lv7_23))) then 
                ap_phi_reg_pp0_iter1_write_mem_reg_408 <= ap_const_lv1_1;
            elsif (((not((op_code_reg_1651 = ap_const_lv7_63)) and not((op_code_reg_1651 = ap_const_lv7_3)) and not((op_code_reg_1651 = ap_const_lv7_23)) and not((op_code_reg_1651 = ap_const_lv7_6F)) and not((op_code_reg_1651 = ap_const_lv7_67)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_code_reg_1651 = ap_const_lv7_3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_63)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_6F)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 
    = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_67)))) then 
                ap_phi_reg_pp0_iter1_write_mem_reg_408 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_write_mem_reg_408 <= ap_phi_reg_pp0_iter0_write_mem_reg_408;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_write_reg_1_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_63))) then 
                ap_phi_reg_pp0_iter1_write_reg_1_reg_383 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_6F)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_67)))) then 
                ap_phi_reg_pp0_iter1_write_reg_1_reg_383 <= ap_const_lv1_1;
            elsif ((not((op_code_reg_1651 = ap_const_lv7_63)) and not((op_code_reg_1651 = ap_const_lv7_3)) and not((op_code_reg_1651 = ap_const_lv7_23)) and not((op_code_reg_1651 = ap_const_lv7_6F)) and not((op_code_reg_1651 = ap_const_lv7_67)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_write_reg_1_reg_383 <= call_ret6_execute_arithm_fu_468_ap_return_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_write_reg_1_reg_383 <= ap_phi_reg_pp0_iter0_write_reg_1_reg_383;
            end if; 
        end if;
    end process;

    g_error_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln193_fu_1291_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_6_fu_1277_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_23)) or (not((funct3_reg_1656 = ap_const_lv3_2)) and not((funct3_reg_1656 = ap_const_lv3_1)) and not((funct3_reg_1656 = ap_const_lv3_0)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_23)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln26_reg_1642 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_6_fu_1277_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_23)) or ((ap_const_boolean_0 
    = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (((funct3_reg_1656 = ap_const_lv3_3) and (op_code_reg_1651 = ap_const_lv7_63)) or ((funct3_reg_1656 = ap_const_lv3_2) and (op_code_reg_1651 = ap_const_lv7_63)))))) then 
                g_error <= ap_const_lv1_1;
            elsif ((not((op_code_reg_1651 = ap_const_lv7_63)) and not((op_code_reg_1651 = ap_const_lv7_3)) and not((op_code_reg_1651 = ap_const_lv7_23)) and not((op_code_reg_1651 = ap_const_lv7_6F)) and not((op_code_reg_1651 = ap_const_lv7_67)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (call_ret6_execute_arithm_fu_468_g_error_ap_vld = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                g_error <= call_ret6_execute_arithm_fu_468_g_error;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (grp_execute_load_fu_456_g_error_ap_vld = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_code_reg_1651 = ap_const_lv7_3))) then 
                g_error <= grp_execute_load_fu_456_g_error;
            end if; 
        end if;
    end process;

    result_12_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_308)) then
                if ((op_code_reg_1651 = ap_const_lv7_23)) then 
                    result_12_reg_361 <= ap_phi_mux_result_77_phi_fu_336_p20;
                elsif ((op_code_reg_1651 = ap_const_lv7_3)) then 
                    result_12_reg_361 <= grp_execute_load_fu_456_ap_return;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    result_12_reg_361 <= ap_phi_reg_pp0_iter1_result_12_reg_361;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (op_code_fu_559_p1 = ap_const_lv7_23))) then
                add_ln187_2_reg_1730 <= add_ln187_2_fu_1160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (funct3_fu_563_p4 = ap_const_lv3_2) and (op_code_fu_559_p1 = ap_const_lv7_23))) then
                ap_phi_reg_pp0_iter0_result_77_reg_333 <= result_13_fu_1087_p34;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_phi_reg_pp0_iter1_result_77_reg_333 <= ap_phi_reg_pp0_iter0_result_77_reg_333;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                funct3_reg_1656 <= instr_memory_q0(14 downto 12);
                funct7_reg_1662 <= instr_memory_q0(31 downto 25);
                immediate_9_reg_1671 <= immediate_9_fu_853_p3;
                op_code_reg_1651 <= op_code_fu_559_p1;
                rd_reg_1667 <= instr_memory_q0(11 downto 7);
                result_13_reg_1690 <= result_13_fu_1087_p34;
                source1_reg_1681 <= source1_fu_1010_p34;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_1))) then
                g_xreg_1 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_A))) then
                g_xreg_10 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_B))) then
                g_xreg_11 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_C))) then
                g_xreg_12 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_D))) then
                g_xreg_13 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_E))) then
                g_xreg_14 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_F))) then
                g_xreg_15 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_10))) then
                g_xreg_16 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_11))) then
                g_xreg_17 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_12))) then
                g_xreg_18 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_13))) then
                g_xreg_19 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_2))) then
                g_xreg_2 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_14))) then
                g_xreg_20 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_15))) then
                g_xreg_21 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_16))) then
                g_xreg_22 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_17))) then
                g_xreg_23 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_18))) then
                g_xreg_24 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_19))) then
                g_xreg_25 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_1A))) then
                g_xreg_26 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_1B))) then
                g_xreg_27 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_1C))) then
                g_xreg_28 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_1D))) then
                g_xreg_29 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_3))) then
                g_xreg_3 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_1E))) then
                g_xreg_30 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_1F))) then
                g_xreg_31 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_4))) then
                g_xreg_4 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_5))) then
                g_xreg_5 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_6))) then
                g_xreg_6 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_7))) then
                g_xreg_7 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_8))) then
                g_xreg_8 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_write_reg_1_phi_fu_388_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rd_reg_1667 = ap_const_lv5_9))) then
                g_xreg_9 <= ap_phi_mux_result_12_phi_fu_366_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln26_reg_1642 <= or_ln26_fu_542_p2;
                pc_reg_1635 <= g_pc;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_23))) then
                pos_3_reg_1746 <= add_ln187_1_fu_1218_p2(17 downto 2);
                select_ln188_reg_1735 <= select_ln188_fu_1269_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln187_1_fu_1218_p2 <= std_logic_vector(unsigned(trunc_ln187_1_fu_1205_p1) + unsigned(trunc_ln187_fu_1202_p1));
    add_ln187_2_fu_1160_p2 <= std_logic_vector(unsigned(trunc_ln71_fu_1083_p1) + unsigned(trunc_ln418_fu_862_p1));
    add_ln187_fu_1208_p2 <= std_logic_vector(unsigned(zext_ln187_fu_1196_p1) + unsigned(sext_ln187_fu_1199_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_159_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_159 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_215_assign_proc : process(op_code_fu_559_p1, funct3_fu_563_p4, grp_fu_481_p2, grp_fu_485_p2, grp_fu_489_p2)
    begin
                ap_condition_215 <= (((((((grp_fu_481_p2 = ap_const_lv1_1) and (funct3_fu_563_p4 = ap_const_lv3_6) and (op_code_fu_559_p1 = ap_const_lv7_63)) or ((grp_fu_481_p2 = ap_const_lv1_0) and (funct3_fu_563_p4 = ap_const_lv3_7) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_485_p2 = ap_const_lv1_0) and (funct3_fu_563_p4 = ap_const_lv3_5) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_485_p2 = ap_const_lv1_1) and (funct3_fu_563_p4 = ap_const_lv3_4) and (op_code_fu_559_p1 = ap_const_lv7_63))) or (not((funct3_fu_563_p4 = ap_const_lv3_3)) and not((funct3_fu_563_p4 = ap_const_lv3_2)) and not((funct3_fu_563_p4 = ap_const_lv3_1)) and not((funct3_fu_563_p4 = ap_const_lv3_4)) and not((funct3_fu_563_p4 = ap_const_lv3_5)) and not((funct3_fu_563_p4 = ap_const_lv3_6)) and not((funct3_fu_563_p4 = ap_const_lv3_7)) and (grp_fu_489_p2 = ap_const_lv1_1) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_489_p2 = ap_const_lv1_0) and (funct3_fu_563_p4 = ap_const_lv3_1) and (op_code_fu_559_p1 = ap_const_lv7_63)));
    end process;


    ap_condition_232_assign_proc : process(op_code_fu_559_p1, funct3_fu_563_p4, grp_fu_481_p2, grp_fu_485_p2, grp_fu_489_p2)
    begin
                ap_condition_232 <= (((((((((funct3_fu_563_p4 = ap_const_lv3_3) and (op_code_fu_559_p1 = ap_const_lv7_63)) or ((funct3_fu_563_p4 = ap_const_lv3_2) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_481_p2 = ap_const_lv1_1) and (funct3_fu_563_p4 = ap_const_lv3_7) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_481_p2 = ap_const_lv1_0) and (funct3_fu_563_p4 = ap_const_lv3_6) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_485_p2 = ap_const_lv1_1) and (funct3_fu_563_p4 = ap_const_lv3_5) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_485_p2 = ap_const_lv1_0) and (funct3_fu_563_p4 = ap_const_lv3_4) and (op_code_fu_559_p1 = ap_const_lv7_63))) or (not((funct3_fu_563_p4 = ap_const_lv3_1)) and not((funct3_fu_563_p4 = ap_const_lv3_4)) and not((funct3_fu_563_p4 = ap_const_lv3_5)) and not((funct3_fu_563_p4 = ap_const_lv3_6)) and not((funct3_fu_563_p4 = ap_const_lv3_7)) and (grp_fu_489_p2 = ap_const_lv1_0) and (op_code_fu_559_p1 = ap_const_lv7_63))) or ((grp_fu_489_p2 = ap_const_lv1_1) and (funct3_fu_563_p4 = ap_const_lv3_1) 
    and (op_code_fu_559_p1 = ap_const_lv7_63)));
    end process;


    ap_condition_308_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_308 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_result_12_phi_fu_366_p12_assign_proc : process(op_code_reg_1651, grp_execute_load_fu_456_ap_return, ap_phi_mux_result_77_phi_fu_336_p20, ap_phi_reg_pp0_iter1_result_12_reg_361)
    begin
        if ((op_code_reg_1651 = ap_const_lv7_23)) then 
            ap_phi_mux_result_12_phi_fu_366_p12 <= ap_phi_mux_result_77_phi_fu_336_p20;
        elsif ((op_code_reg_1651 = ap_const_lv7_3)) then 
            ap_phi_mux_result_12_phi_fu_366_p12 <= grp_execute_load_fu_456_ap_return;
        else 
            ap_phi_mux_result_12_phi_fu_366_p12 <= ap_phi_reg_pp0_iter1_result_12_reg_361;
        end if; 
    end process;


    ap_phi_mux_result_77_phi_fu_336_p20_assign_proc : process(data_memory_q0, op_code_reg_1651, funct3_reg_1656, select_ln188_reg_1735, ap_phi_reg_pp0_iter1_result_77_reg_333, result_6_fu_1427_p5, result_7_fu_1411_p5, result_8_fu_1395_p5, result_9_fu_1379_p5, result_10_fu_1363_p5, result_11_fu_1347_p5)
    begin
        if (((select_ln188_reg_1735 = ap_const_lv3_2) and (funct3_reg_1656 = ap_const_lv3_1) and (op_code_reg_1651 = ap_const_lv7_23))) then 
            ap_phi_mux_result_77_phi_fu_336_p20 <= result_11_fu_1347_p5;
        elsif (((select_ln188_reg_1735 = ap_const_lv3_0) and (funct3_reg_1656 = ap_const_lv3_1) and (op_code_reg_1651 = ap_const_lv7_23))) then 
            ap_phi_mux_result_77_phi_fu_336_p20 <= result_10_fu_1363_p5;
        elsif (((select_ln188_reg_1735 = ap_const_lv3_3) and (funct3_reg_1656 = ap_const_lv3_0) and (op_code_reg_1651 = ap_const_lv7_23))) then 
            ap_phi_mux_result_77_phi_fu_336_p20 <= result_9_fu_1379_p5;
        elsif (((select_ln188_reg_1735 = ap_const_lv3_2) and (funct3_reg_1656 = ap_const_lv3_0) and (op_code_reg_1651 = ap_const_lv7_23))) then 
            ap_phi_mux_result_77_phi_fu_336_p20 <= result_8_fu_1395_p5;
        elsif (((select_ln188_reg_1735 = ap_const_lv3_1) and (funct3_reg_1656 = ap_const_lv3_0) and (op_code_reg_1651 = ap_const_lv7_23))) then 
            ap_phi_mux_result_77_phi_fu_336_p20 <= result_7_fu_1411_p5;
        elsif (((select_ln188_reg_1735 = ap_const_lv3_0) and (funct3_reg_1656 = ap_const_lv3_0) and (op_code_reg_1651 = ap_const_lv7_23))) then 
            ap_phi_mux_result_77_phi_fu_336_p20 <= result_6_fu_1427_p5;
        elsif (((not((select_ln188_reg_1735 = ap_const_lv3_3)) and not((select_ln188_reg_1735 = ap_const_lv3_1)) and not((select_ln188_reg_1735 = ap_const_lv3_2)) and not((select_ln188_reg_1735 = ap_const_lv3_0)) and (funct3_reg_1656 = ap_const_lv3_0) and (op_code_reg_1651 = ap_const_lv7_23)) or (not((select_ln188_reg_1735 = ap_const_lv3_2)) and not((select_ln188_reg_1735 = ap_const_lv3_0)) and (funct3_reg_1656 = ap_const_lv3_1) and (op_code_reg_1651 = ap_const_lv7_23)) or (not((funct3_reg_1656 = ap_const_lv3_2)) and not((funct3_reg_1656 = ap_const_lv3_1)) and not((funct3_reg_1656 = ap_const_lv3_0)) and (op_code_reg_1651 = ap_const_lv7_23)))) then 
            ap_phi_mux_result_77_phi_fu_336_p20 <= data_memory_q0;
        else 
            ap_phi_mux_result_77_phi_fu_336_p20 <= ap_phi_reg_pp0_iter1_result_77_reg_333;
        end if; 
    end process;

    ap_phi_mux_write_mem_phi_fu_413_p12 <= ap_phi_reg_pp0_iter1_write_mem_reg_408;

    ap_phi_mux_write_reg_1_phi_fu_388_p12_assign_proc : process(op_code_reg_1651, ap_phi_reg_pp0_iter1_write_reg_1_reg_383)
    begin
        if ((op_code_reg_1651 = ap_const_lv7_23)) then 
            ap_phi_mux_write_reg_1_phi_fu_388_p12 <= ap_const_lv1_0;
        elsif ((op_code_reg_1651 = ap_const_lv7_3)) then 
            ap_phi_mux_write_reg_1_phi_fu_388_p12 <= ap_const_lv1_1;
        else 
            ap_phi_mux_write_reg_1_phi_fu_388_p12 <= ap_phi_reg_pp0_iter1_write_reg_1_reg_383;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_result_12_reg_361 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_write_addr_1_reg_433 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_write_mem_reg_408 <= "X";
    ap_phi_reg_pp0_iter0_write_reg_1_reg_383 <= "X";

    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= g_error;

    data_memory_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, op_code_reg_1651, ap_CS_fsm_pp0_stage1, grp_execute_load_fu_456_data_memory_address0, ap_block_pp0_stage2, ap_block_pp0_stage0, zext_ln198_fu_1313_p1, zext_ln405_fu_1626_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_memory_address0 <= zext_ln405_fu_1626_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_23))) then 
            data_memory_address0 <= zext_ln198_fu_1313_p1(16 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_code_reg_1651 = ap_const_lv7_3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_3)))) then 
            data_memory_address0 <= grp_execute_load_fu_456_data_memory_address0;
        else 
            data_memory_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_memory_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, op_code_reg_1651, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, grp_execute_load_fu_456_data_memory_ce0, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_23)))) then 
            data_memory_ce0 <= ap_const_logic_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_code_reg_1651 = ap_const_lv7_3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (op_code_reg_1651 = ap_const_lv7_3)))) then 
            data_memory_ce0 <= grp_execute_load_fu_456_data_memory_ce0;
        else 
            data_memory_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_memory_d0 <= result_12_reg_361;

    data_memory_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_phi_mux_write_mem_phi_fu_413_p12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_phi_mux_write_mem_phi_fu_413_p12 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_memory_we0 <= ap_const_logic_1;
        else 
            data_memory_we0 <= ap_const_logic_0;
        end if; 
    end process;

    funct3_fu_563_p4 <= instr_memory_q0(14 downto 12);
    grp_execute_load_fu_456_ap_start <= grp_execute_load_fu_456_ap_start_reg;
    grp_fu_481_p2 <= "1" when (unsigned(source1_fu_1010_p34) < unsigned(result_13_fu_1087_p34)) else "0";
    grp_fu_485_p2 <= "1" when (signed(source1_fu_1010_p34) < signed(result_13_fu_1087_p34)) else "0";
    grp_fu_489_p2 <= "1" when (source1_fu_1010_p34 = result_13_fu_1087_p34) else "0";

    grp_fu_493_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, immediate_9_fu_853_p3, immediate_9_reg_1671, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_493_p1 <= immediate_9_reg_1671;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_493_p1 <= immediate_9_fu_853_p3;
            else 
                grp_fu_493_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_493_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_493_p2 <= std_logic_vector(unsigned(pc_reg_1635) + unsigned(grp_fu_493_p1));
    grp_fu_497_p2 <= std_logic_vector(unsigned(pc_reg_1635) + unsigned(ap_const_lv32_4));
    grp_fu_502_p2 <= std_logic_vector(unsigned(source1_reg_1681) + unsigned(immediate_9_reg_1671));
    icmp_ln193_fu_1291_p2 <= "1" when (unsigned(pos_fu_1224_p4) > unsigned(ap_const_lv26_C7FF)) else "0";
    icmp_ln26_1_fu_536_p2 <= "1" when (unsigned(g_pc) > unsigned(ap_const_lv32_31FFF)) else "0";
    icmp_ln26_fu_520_p2 <= "0" when (trunc_ln25_fu_516_p1 = ap_const_lv2_0) else "1";
    icmp_ln39_1_fu_767_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_23) else "0";
    icmp_ln39_2_fu_785_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_37) else "0";
    icmp_ln39_3_fu_791_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_17) else "0";
    icmp_ln39_4_fu_811_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_3) else "0";
    icmp_ln39_5_fu_817_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_13) else "0";
    icmp_ln39_6_fu_823_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_67) else "0";
    icmp_ln39_7_fu_829_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_73) else "0";
    icmp_ln39_fu_753_p2 <= "1" when (op_code_fu_559_p1 = ap_const_lv7_63) else "0";
    immediate_1_fu_627_p3 <= (tmp_10_fu_617_p4 & tmp_s_fu_607_p4);
    immediate_2_fu_675_p6 <= ((((tmp_3_fu_667_p3 & tmp_2_fu_659_p3) & tmp_12_fu_649_p4) & tmp_11_fu_639_p4) & ap_const_lv1_0);
    immediate_3_fu_703_p3 <= (tmp_fu_693_p4 & ap_const_lv12_0);
    immediate_4_fu_739_p6 <= ((((tmp_3_fu_667_p3 & tmp_14_fu_729_p4) & tmp_4_fu_721_p3) & tmp_13_fu_711_p4) & ap_const_lv1_0);
    immediate_5_fu_759_p3 <= 
        sext_ln418_1_fu_689_p1 when (icmp_ln39_fu_753_p2(0) = '1') else 
        immediate_4_fu_739_p6;
    immediate_6_fu_773_p3 <= 
        sext_ln418_fu_635_p1 when (icmp_ln39_1_fu_767_p2(0) = '1') else 
        immediate_5_fu_759_p3;
    immediate_7_fu_803_p3 <= 
        immediate_3_fu_703_p3 when (or_ln39_fu_797_p2(0) = '1') else 
        sext_ln418_2_fu_781_p1;
    immediate_9_fu_853_p3 <= 
        sext_ln45_fu_603_p1 when (or_ln39_3_fu_847_p2(0) = '1') else 
        immediate_7_fu_803_p3;
    immediate_fu_593_p4 <= instr_memory_q0(31 downto 20);
    instr_memory_address0 <= zext_ln28_fu_548_p1(16 - 1 downto 0);

    instr_memory_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instr_memory_ce0 <= ap_const_logic_1;
        else 
            instr_memory_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_526_p4 <= g_pc(17 downto 2);
    op_code_fu_559_p1 <= instr_memory_q0(7 - 1 downto 0);
    or_ln26_fu_542_p2 <= (icmp_ln26_fu_520_p2 or icmp_ln26_1_fu_536_p2);
    or_ln39_1_fu_835_p2 <= (icmp_ln39_5_fu_817_p2 or icmp_ln39_4_fu_811_p2);
    or_ln39_2_fu_841_p2 <= (icmp_ln39_7_fu_829_p2 or icmp_ln39_6_fu_823_p2);
    or_ln39_3_fu_847_p2 <= (or_ln39_2_fu_841_p2 or or_ln39_1_fu_835_p2);
    or_ln39_fu_797_p2 <= (icmp_ln39_3_fu_791_p2 or icmp_ln39_2_fu_785_p2);
    p_and_t_fu_1248_p3 <= (ap_const_lv1_0 & sub_ln188_fu_1242_p2);
    pos_3_fu_1303_p4 <= add_ln187_1_fu_1218_p2(17 downto 2);
    pos_fu_1224_p4 <= add_ln187_1_fu_1218_p2(27 downto 2);
    result_10_fu_1363_p5 <= (data_memory_q0(31 downto 16) & trunc_ln213_fu_1360_p1);
    result_11_fu_1347_p5 <= (trunc_ln215_fu_1344_p1 & data_memory_q0(15 downto 0));
    result_13_fu_1087_p33 <= instr_memory_q0(24 downto 20);
    result_6_fu_1427_p5 <= (data_memory_q0(31 downto 8) & trunc_ln202_fu_1424_p1);
    result_7_fu_1411_p5 <= (data_memory_q0(31 downto 16) & trunc_ln204_fu_1408_p1 & data_memory_q0(7 downto 0));
    result_8_fu_1395_p5 <= (data_memory_q0(31 downto 24) & trunc_ln206_fu_1392_p1 & data_memory_q0(15 downto 0));
    result_9_fu_1379_p5 <= (trunc_ln208_fu_1376_p1 & data_memory_q0(23 downto 0));
    select_ln188_fu_1269_p3 <= 
        sub_ln188_1_fu_1256_p2 when (tmp_5_fu_1234_p3(0) = '1') else 
        tmp_15_fu_1262_p3;
        sext_ln187_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(immediate_9_reg_1671),34));

        sext_ln418_1_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(immediate_2_fu_675_p6),21));

        sext_ln418_2_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(immediate_6_fu_773_p3),32));

        sext_ln418_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(immediate_1_fu_627_p3),21));

        sext_ln45_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(immediate_fu_593_p4),32));

    source1_fu_1010_p33 <= instr_memory_q0(19 downto 15);
    sub_ln188_1_fu_1256_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(p_and_t_fu_1248_p3));
    sub_ln188_fu_1242_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(trunc_ln187_2_fu_1214_p1));
    tmp_10_fu_617_p4 <= instr_memory_q0(31 downto 25);
    tmp_11_fu_639_p4 <= instr_memory_q0(11 downto 8);
    tmp_12_fu_649_p4 <= instr_memory_q0(30 downto 25);
    tmp_13_fu_711_p4 <= instr_memory_q0(30 downto 21);
    tmp_14_fu_729_p4 <= instr_memory_q0(19 downto 12);
    tmp_15_fu_1262_p3 <= (ap_const_lv1_0 & add_ln187_2_reg_1730);
    tmp_2_fu_659_p3 <= instr_memory_q0(7 downto 7);
    tmp_3_fu_667_p3 <= instr_memory_q0(31 downto 31);
    tmp_4_fu_721_p3 <= instr_memory_q0(20 downto 20);
    tmp_5_fu_1234_p3 <= add_ln187_fu_1208_p2(33 downto 33);
    tmp_6_fu_1277_p3 <= add_ln187_1_fu_1218_p2(28 downto 28);
    tmp_fu_693_p4 <= instr_memory_q0(31 downto 12);
    tmp_s_fu_607_p4 <= instr_memory_q0(11 downto 7);
    trunc_ln187_1_fu_1205_p1 <= source1_reg_1681(29 - 1 downto 0);
    trunc_ln187_2_fu_1214_p1 <= grp_fu_502_p2(2 - 1 downto 0);
    trunc_ln187_fu_1202_p1 <= immediate_9_reg_1671(29 - 1 downto 0);
    trunc_ln202_fu_1424_p1 <= result_13_reg_1690(8 - 1 downto 0);
    trunc_ln204_fu_1408_p1 <= result_13_reg_1690(8 - 1 downto 0);
    trunc_ln206_fu_1392_p1 <= result_13_reg_1690(8 - 1 downto 0);
    trunc_ln208_fu_1376_p1 <= result_13_reg_1690(8 - 1 downto 0);
    trunc_ln213_fu_1360_p1 <= result_13_reg_1690(16 - 1 downto 0);
    trunc_ln215_fu_1344_p1 <= result_13_reg_1690(16 - 1 downto 0);
    trunc_ln25_fu_516_p1 <= g_pc(2 - 1 downto 0);
    trunc_ln418_fu_862_p1 <= immediate_9_fu_853_p3(2 - 1 downto 0);
    trunc_ln71_fu_1083_p1 <= source1_fu_1010_p34(2 - 1 downto 0);
    zext_ln187_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(source1_reg_1681),34));
    zext_ln198_fu_1313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_3_fu_1303_p4),64));
    zext_ln28_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_526_p4),64));
    zext_ln405_fu_1626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter1_write_addr_1_reg_433),64));
end behav;
