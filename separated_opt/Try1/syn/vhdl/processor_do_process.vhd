-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity processor_do_process is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    memory_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    memory_ce0 : OUT STD_LOGIC;
    memory_we0 : OUT STD_LOGIC;
    memory_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    memory_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of processor_do_process is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_23 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv7_67 : STD_LOGIC_VECTOR (6 downto 0) := "1100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv7_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_const_lv7_13 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_const_lv7_73 : STD_LOGIC_VECTOR (6 downto 0) := "1110011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal g_pc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal g_error : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal g_xreg_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal g_xreg_ce0 : STD_LOGIC;
    signal g_xreg_we0 : STD_LOGIC;
    signal g_xreg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_xreg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_xreg_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal g_xreg_ce1 : STD_LOGIC;
    signal g_xreg_we1 : STD_LOGIC;
    signal g_xreg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_xreg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal op_code_reg_1123 : STD_LOGIC_VECTOR (6 downto 0);
    signal pc_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_code_fu_414_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal funct3_reg_1134 : STD_LOGIC_VECTOR (2 downto 0);
    signal funct7_reg_1139 : STD_LOGIC_VECTOR (6 downto 0);
    signal rd_reg_1144 : STD_LOGIC_VECTOR (4 downto 0);
    signal imm_6_fu_626_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal imm_6_reg_1160 : STD_LOGIC_VECTOR (20 downto 0);
    signal source1_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal result_18_reg_1178 : STD_LOGIC_VECTOR (31 downto 0);
    signal imm_8_fu_731_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal imm_8_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal branch_5_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal branch_4_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal branch_3_reg_1208 : STD_LOGIC_VECTOR (0 downto 0);
    signal branch_2_reg_1212 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal branch_1_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal branch_reg_1220 : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_addr_1_reg_1229 : STD_LOGIC_VECTOR (16 downto 0);
    signal result_execute_arithm_fu_315_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal result_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln378_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln160_fu_823_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_1_fu_814_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln158_fu_831_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln151_fu_899_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln139_fu_903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln137_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln130_fu_979_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_13_fu_1004_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_fu_995_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_12_fu_1019_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_11_fu_1034_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_10_fu_1046_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_fu_1058_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_fu_1070_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_execute_arithm_fu_315_ap_ready : STD_LOGIC;
    signal result_execute_arithm_fu_315_g_error : STD_LOGIC_VECTOR (0 downto 0);
    signal result_execute_arithm_fu_315_g_error_ap_vld : STD_LOGIC;
    signal empty_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_17_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_0_03053_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_4_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_309_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln29_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln372_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln372_1_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln26_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_fu_383_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_fu_399_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal rs1_fu_448_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs2_fu_458_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_488_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_478_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal imm_1_fu_498_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_520_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_510_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal imm_2_fu_546_p6 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_582_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_564_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln46_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln392_1_fu_560_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal imm_4_fu_592_p6 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln46_1_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln392_fu_506_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal imm_5_fu_612_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal imm_fu_634_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_648_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln46_2_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_3_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal imm_3_fu_658_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln392_2_fu_666_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln46_4_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_5_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_6_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_7_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_2_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_1_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_3_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln52_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal imm_7_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln120_1_fu_746_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln120_fu_743_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln120_fu_749_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mem_pos_fu_755_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln171_1_fu_773_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln171_fu_770_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_fu_776_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal write_addr_fu_782_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln120_3_fu_811_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln120_2_fu_808_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_347_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_16_fu_827_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_859_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_849_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln147_fu_845_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_835_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln146_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln146_fu_869_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln146_1_fu_883_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_6_fu_891_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_14_fu_907_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_939_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_929_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln126_fu_925_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_915_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln125_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln125_fu_949_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln125_1_fu_963_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_5_fu_971_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln171_3_fu_992_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln171_2_fu_989_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln190_fu_1001_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln188_fu_1016_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln177_fu_1031_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_condition_159 : BOOLEAN;
    signal ap_condition_227 : BOOLEAN;
    signal ap_condition_223 : BOOLEAN;
    signal ap_condition_214 : BOOLEAN;
    signal ap_condition_208 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component processor_execute_arithm IS
    port (
        ap_ready : OUT STD_LOGIC;
        op_code_val : IN STD_LOGIC_VECTOR (6 downto 0);
        funct3_val : IN STD_LOGIC_VECTOR (2 downto 0);
        funct7_val : IN STD_LOGIC_VECTOR (6 downto 0);
        source1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        source2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        imm_val : IN STD_LOGIC_VECTOR (31 downto 0);
        pc_val : IN STD_LOGIC_VECTOR (31 downto 0);
        g_error : OUT STD_LOGIC_VECTOR (0 downto 0);
        g_error_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component processor_do_process_g_xreg_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    g_xreg_U : component processor_do_process_g_xreg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_xreg_address0,
        ce0 => g_xreg_ce0,
        we0 => g_xreg_we0,
        d0 => g_xreg_d0,
        q0 => g_xreg_q0,
        address1 => g_xreg_address1,
        ce1 => g_xreg_ce1,
        we1 => g_xreg_we1,
        d1 => g_xreg_d1,
        q1 => g_xreg_q1);

    result_execute_arithm_fu_315 : component processor_execute_arithm
    port map (
        ap_ready => result_execute_arithm_fu_315_ap_ready,
        op_code_val => op_code_reg_1123,
        funct3_val => funct3_reg_1134,
        funct7_val => funct7_reg_1139,
        source1_val => source1_reg_1165,
        source2_val => result_18_reg_1178,
        imm_val => imm_8_reg_1190,
        pc_val => pc_reg_1102,
        g_error => result_execute_arithm_fu_315_g_error,
        g_error_ap_vld => result_execute_arithm_fu_315_g_error_ap_vld,
        ap_return => result_execute_arithm_fu_315_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    g_pc_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                g_pc <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    g_pc <= ap_phi_mux_storemerge_phi_fu_309_p4;
                end if; 
            end if;
        end if;
    end process;


    empty_17_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((op_code_reg_1123 = ap_const_lv7_67) or (op_code_reg_1123 = ap_const_lv7_6F)))) then 
                empty_17_reg_230 <= empty_reg_220;
            elsif ((((grp_fu_335_p2 = ap_const_lv1_0) and (funct3_reg_1134 = ap_const_lv3_7) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((grp_fu_335_p2 = ap_const_lv1_1) and (funct3_reg_1134 = ap_const_lv3_6) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((funct3_reg_1134 = ap_const_lv3_0) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_343_p2 = ap_const_lv1_1)) or ((funct3_reg_1134 = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_343_p2 = ap_const_lv1_0)) or ((funct3_reg_1134 = ap_const_lv3_4) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_339_p2 = ap_const_lv1_1)) or ((funct3_reg_1134 = ap_const_lv3_5) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_339_p2 = ap_const_lv1_0)))) then 
                empty_17_reg_230 <= pc_reg_1102;
            end if; 
        end if;
    end process;

    empty_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                if ((op_code_reg_1123 = ap_const_lv7_6F)) then 
                    empty_reg_220 <= pc_reg_1102;
                elsif ((op_code_reg_1123 = ap_const_lv7_67)) then 
                    empty_reg_220 <= g_xreg_q1;
                end if;
            end if; 
        end if;
    end process;

    g_error_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (((funct3_reg_1134 = ap_const_lv3_3) and (op_code_reg_1123 = ap_const_lv7_63)) or ((funct3_reg_1134 = ap_const_lv3_2) and (op_code_reg_1123 = ap_const_lv7_63)))) or ((icmp_ln26_fu_387_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (not((funct3_reg_1134 = ap_const_lv3_2)) and not((funct3_reg_1134 = ap_const_lv3_0)) and not((funct3_reg_1134 = ap_const_lv3_1)) and (op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not((funct3_reg_1134 = ap_const_lv3_2)) and not((funct3_reg_1134 = ap_const_lv3_0)) and not((funct3_reg_1134 = ap_const_lv3_1)) and not((funct3_reg_1134 = ap_const_lv3_4)) and not((funct3_reg_1134 = ap_const_lv3_5)) and (op_code_reg_1123 = ap_const_lv7_3) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                g_error <= ap_const_lv1_1;
            elsif ((not((op_code_reg_1123 = ap_const_lv7_23)) and not((op_code_reg_1123 = ap_const_lv7_3)) and not((op_code_reg_1123 = ap_const_lv7_67)) and not((op_code_reg_1123 = ap_const_lv7_6F)) and not((op_code_reg_1123 = ap_const_lv7_63)) and (result_execute_arithm_fu_315_g_error_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                g_error <= result_execute_arithm_fu_315_g_error;
            end if; 
        end if;
    end process;

    p_0_0_03053_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((funct3_reg_1134 = ap_const_lv3_0) and (op_code_reg_1123 = ap_const_lv7_23) and (offset_fu_995_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_0_03053_reg_250 <= result_11_fu_1034_p5;
            elsif (((funct3_reg_1134 = ap_const_lv3_0) and (op_code_reg_1123 = ap_const_lv7_23) and (offset_fu_995_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_0_03053_reg_250 <= result_10_fu_1046_p5;
            elsif (((funct3_reg_1134 = ap_const_lv3_0) and (op_code_reg_1123 = ap_const_lv7_23) and (offset_fu_995_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_0_03053_reg_250 <= result_9_fu_1058_p5;
            elsif (((funct3_reg_1134 = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_23) and (offset_fu_995_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_0_03053_reg_250 <= result_13_fu_1004_p5;
            elsif (((funct3_reg_1134 = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_23) and (offset_fu_995_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_0_03053_reg_250 <= result_12_fu_1019_p5;
            elsif (((funct3_reg_1134 = ap_const_lv3_2) and (op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_0_03053_reg_250 <= result_18_reg_1178;
            elsif (((funct3_reg_1134 = ap_const_lv3_0) and (op_code_reg_1123 = ap_const_lv7_23) and (offset_fu_995_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_0_03053_reg_250 <= result_8_fu_1070_p5;
            elsif (((not((offset_fu_995_p2 = ap_const_lv2_0)) and not((offset_fu_995_p2 = ap_const_lv2_2)) and (funct3_reg_1134 = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not((funct3_reg_1134 = ap_const_lv3_2)) and not((funct3_reg_1134 = ap_const_lv3_0)) and not((funct3_reg_1134 = ap_const_lv3_1)) and (op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                p_0_0_03053_reg_250 <= memory_q0;
            end if; 
        end if;
    end process;

    result_4_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if ((ap_const_boolean_1 = ap_condition_208)) then 
                    result_4_reg_274 <= zext_ln160_fu_823_p1;
                elsif ((ap_const_boolean_1 = ap_condition_214)) then 
                    result_4_reg_274 <= zext_ln158_fu_831_p1;
                elsif ((ap_const_boolean_1 = ap_condition_223)) then 
                    result_4_reg_274 <= sext_ln139_fu_903_p1;
                elsif ((ap_const_boolean_1 = ap_condition_227)) then 
                    result_4_reg_274 <= sext_ln137_fu_911_p1;
                elsif (((funct3_reg_1134 = ap_const_lv3_2) and (op_code_reg_1123 = ap_const_lv7_3))) then 
                    result_4_reg_274 <= memory_q0;
                elsif (((funct3_reg_1134 = ap_const_lv3_0) and (op_code_reg_1123 = ap_const_lv7_3))) then 
                    result_4_reg_274 <= sext_ln130_fu_979_p1;
                elsif (((funct3_reg_1134 = ap_const_lv3_4) and (op_code_reg_1123 = ap_const_lv7_3))) then 
                    result_4_reg_274 <= zext_ln151_fu_899_p1;
                elsif ((ap_const_boolean_1 = ap_condition_159)) then 
                    result_4_reg_274 <= result_reg_1234;
                end if;
            end if; 
        end if;
    end process;

    storemerge_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((op_code_reg_1123 = ap_const_lv7_6F) or ((op_code_reg_1123 = ap_const_lv7_67) or (((((((funct3_reg_1134 = ap_const_lv3_6) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_4_reg_1204 = ap_const_lv1_1)) or ((funct3_reg_1134 = ap_const_lv3_7) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_5_reg_1200 = ap_const_lv1_0))) or ((funct3_reg_1134 = ap_const_lv3_5) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_3_reg_1208 = ap_const_lv1_0))) or ((funct3_reg_1134 = ap_const_lv3_4) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_2_reg_1212 = ap_const_lv1_1))) or (not((funct3_reg_1134 = ap_const_lv3_3)) and not((funct3_reg_1134 = ap_const_lv3_2)) and not((funct3_reg_1134 = ap_const_lv3_1)) and not((funct3_reg_1134 = ap_const_lv3_4)) and not((funct3_reg_1134 = ap_const_lv3_5)) and not((funct3_reg_1134 = ap_const_lv3_6)) and not((funct3_reg_1134 = ap_const_lv3_7)) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_reg_1220 = ap_const_lv1_1))) or ((funct3_reg_1134 
    = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_1_reg_1216 = ap_const_lv1_0))))))) then 
                storemerge_reg_306 <= add_ln378_fu_803_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((((((((((funct3_reg_1134 = ap_const_lv3_3) and (op_code_reg_1123 = ap_const_lv7_63)) or ((funct3_reg_1134 = ap_const_lv3_2) and (op_code_reg_1123 = ap_const_lv7_63))) or ((funct3_reg_1134 = ap_const_lv3_7) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_5_reg_1200 = ap_const_lv1_1))) or ((funct3_reg_1134 = ap_const_lv3_6) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_4_reg_1204 = ap_const_lv1_0))) or ((funct3_reg_1134 = ap_const_lv3_5) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_3_reg_1208 = ap_const_lv1_1))) or ((funct3_reg_1134 = ap_const_lv3_4) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_2_reg_1212 = ap_const_lv1_0))) or (not((funct3_reg_1134 = ap_const_lv3_1)) and not((funct3_reg_1134 = ap_const_lv3_4)) and not((funct3_reg_1134 = ap_const_lv3_5)) and not((funct3_reg_1134 = ap_const_lv3_6)) and not((funct3_reg_1134 = ap_const_lv3_7)) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_reg_1220 = ap_const_lv1_0))) or ((funct3_reg_1134 
    = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_1_reg_1216 = ap_const_lv1_1))) or (not((op_code_reg_1123 = ap_const_lv7_67)) and not((op_code_reg_1123 = ap_const_lv7_6F)) and not((op_code_reg_1123 = ap_const_lv7_63)))))) then 
                storemerge_reg_306 <= grp_fu_328_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((funct3_reg_1134 = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                branch_1_reg_1216 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((funct3_reg_1134 = ap_const_lv3_4) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                branch_2_reg_1212 <= grp_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((funct3_reg_1134 = ap_const_lv3_5) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                branch_3_reg_1208 <= grp_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((funct3_reg_1134 = ap_const_lv3_6) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                branch_4_reg_1204 <= grp_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((funct3_reg_1134 = ap_const_lv3_7) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                branch_5_reg_1200 <= grp_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((funct3_reg_1134 = ap_const_lv3_0) and (op_code_reg_1123 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                branch_reg_1220 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                funct3_reg_1134 <= memory_q0(14 downto 12);
                funct7_reg_1139 <= memory_q0(31 downto 25);
                imm_6_reg_1160 <= imm_6_fu_626_p3;
                op_code_reg_1123 <= op_code_fu_414_p1;
                rd_reg_1144 <= memory_q0(11 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                imm_8_reg_1190 <= imm_8_fu_731_p3;
                result_18_reg_1178 <= g_xreg_q0;
                source1_reg_1165 <= g_xreg_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                memory_addr_1_reg_1229 <= zext_ln173_fu_792_p1(17 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                pc_reg_1102 <= g_pc;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((op_code_reg_1123 = ap_const_lv7_3) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_372 <= memory_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((op_code_reg_1123 = ap_const_lv7_23)) and not((op_code_reg_1123 = ap_const_lv7_3)) and not((op_code_reg_1123 = ap_const_lv7_67)) and not((op_code_reg_1123 = ap_const_lv7_6F)) and not((op_code_reg_1123 = ap_const_lv7_63)) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                result_reg_1234 <= result_execute_arithm_fu_315_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln120_fu_749_p2 <= std_logic_vector(unsigned(trunc_ln120_1_fu_746_p1) + unsigned(trunc_ln120_fu_743_p1));
    add_ln171_fu_776_p2 <= std_logic_vector(unsigned(trunc_ln171_1_fu_773_p1) + unsigned(trunc_ln171_fu_770_p1));
    add_ln378_fu_803_p2 <= std_logic_vector(unsigned(empty_17_reg_230) + unsigned(imm_8_reg_1190));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_condition_159_assign_proc : process(op_code_reg_1123)
    begin
                ap_condition_159 <= (not((op_code_reg_1123 = ap_const_lv7_23)) and not((op_code_reg_1123 = ap_const_lv7_3)) and not((op_code_reg_1123 = ap_const_lv7_67)) and not((op_code_reg_1123 = ap_const_lv7_6F)) and not((op_code_reg_1123 = ap_const_lv7_63)));
    end process;


    ap_condition_208_assign_proc : process(op_code_reg_1123, funct3_reg_1134, offset_1_fu_814_p2)
    begin
                ap_condition_208 <= ((funct3_reg_1134 = ap_const_lv3_5) and (op_code_reg_1123 = ap_const_lv7_3) and (offset_1_fu_814_p2 = ap_const_lv2_2));
    end process;


    ap_condition_214_assign_proc : process(op_code_reg_1123, funct3_reg_1134, offset_1_fu_814_p2)
    begin
                ap_condition_214 <= ((funct3_reg_1134 = ap_const_lv3_5) and (op_code_reg_1123 = ap_const_lv7_3) and (offset_1_fu_814_p2 = ap_const_lv2_0));
    end process;


    ap_condition_223_assign_proc : process(op_code_reg_1123, funct3_reg_1134, offset_1_fu_814_p2)
    begin
                ap_condition_223 <= ((funct3_reg_1134 = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_3) and (offset_1_fu_814_p2 = ap_const_lv2_2));
    end process;


    ap_condition_227_assign_proc : process(op_code_reg_1123, funct3_reg_1134, offset_1_fu_814_p2)
    begin
                ap_condition_227 <= ((funct3_reg_1134 = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_3) and (offset_1_fu_814_p2 = ap_const_lv2_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_309_p4_assign_proc : process(op_code_reg_1123, funct3_reg_1134, branch_5_reg_1200, branch_4_reg_1204, branch_3_reg_1208, branch_2_reg_1212, branch_1_reg_1216, branch_reg_1220, grp_fu_328_p2, storemerge_reg_306, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((((((((((funct3_reg_1134 = ap_const_lv3_3) and (op_code_reg_1123 = ap_const_lv7_63)) or ((funct3_reg_1134 = ap_const_lv3_2) and (op_code_reg_1123 = ap_const_lv7_63))) or ((funct3_reg_1134 = ap_const_lv3_7) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_5_reg_1200 = ap_const_lv1_1))) or ((funct3_reg_1134 = ap_const_lv3_6) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_4_reg_1204 = ap_const_lv1_0))) or ((funct3_reg_1134 = ap_const_lv3_5) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_3_reg_1208 = ap_const_lv1_1))) or ((funct3_reg_1134 = ap_const_lv3_4) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_2_reg_1212 = ap_const_lv1_0))) or (not((funct3_reg_1134 = ap_const_lv3_1)) and not((funct3_reg_1134 = ap_const_lv3_4)) and not((funct3_reg_1134 = ap_const_lv3_5)) and not((funct3_reg_1134 = ap_const_lv3_6)) and not((funct3_reg_1134 = ap_const_lv3_7)) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_reg_1220 = ap_const_lv1_0))) or ((funct3_reg_1134 
    = ap_const_lv3_1) and (op_code_reg_1123 = ap_const_lv7_63) and (branch_1_reg_1216 = ap_const_lv1_1))) or (not((op_code_reg_1123 = ap_const_lv7_67)) and not((op_code_reg_1123 = ap_const_lv7_6F)) and not((op_code_reg_1123 = ap_const_lv7_63)))))) then 
            ap_phi_mux_storemerge_phi_fu_309_p4 <= grp_fu_328_p2;
        else 
            ap_phi_mux_storemerge_phi_fu_309_p4 <= storemerge_reg_306;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= g_error;

    g_xreg_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6, zext_ln43_fu_473_p1, zext_ln372_1_fu_1088_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            g_xreg_address0 <= zext_ln372_1_fu_1088_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            g_xreg_address0 <= zext_ln43_fu_473_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            g_xreg_address0 <= ap_const_lv5_0;
        else 
            g_xreg_address0 <= "XXXXX";
        end if; 
    end process;


    g_xreg_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln42_fu_468_p1, zext_ln372_fu_739_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            g_xreg_address1 <= zext_ln372_fu_739_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            g_xreg_address1 <= zext_ln42_fu_468_p1(5 - 1 downto 0);
        else 
            g_xreg_address1 <= "XXXXX";
        end if; 
    end process;


    g_xreg_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            g_xreg_ce0 <= ap_const_logic_1;
        else 
            g_xreg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    g_xreg_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            g_xreg_ce1 <= ap_const_logic_1;
        else 
            g_xreg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    g_xreg_d0_assign_proc : process(ap_CS_fsm_state1, result_4_reg_274, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            g_xreg_d0 <= result_4_reg_274;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            g_xreg_d0 <= ap_const_lv32_0;
        else 
            g_xreg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    g_xreg_d1 <= std_logic_vector(unsigned(pc_reg_1102) + unsigned(ap_const_lv32_4));

    g_xreg_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, op_code_reg_1123, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and ((not((op_code_reg_1123 = ap_const_lv7_23)) and (op_code_reg_1123 = ap_const_lv7_3)) or (not((op_code_reg_1123 = ap_const_lv7_23)) and not((op_code_reg_1123 = ap_const_lv7_67)) and not((op_code_reg_1123 = ap_const_lv7_6F)) and not((op_code_reg_1123 = ap_const_lv7_63))))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            g_xreg_we0 <= ap_const_logic_1;
        else 
            g_xreg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    g_xreg_we1_assign_proc : process(op_code_reg_1123, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((op_code_reg_1123 = ap_const_lv7_67) or (op_code_reg_1123 = ap_const_lv7_6F)))) then 
            g_xreg_we1 <= ap_const_logic_1;
        else 
            g_xreg_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_328_p2 <= std_logic_vector(unsigned(pc_reg_1102) + unsigned(ap_const_lv32_4));
    grp_fu_335_p2 <= "1" when (unsigned(source1_reg_1165) < unsigned(result_18_reg_1178)) else "0";
    grp_fu_339_p2 <= "1" when (signed(source1_reg_1165) < signed(result_18_reg_1178)) else "0";
    grp_fu_343_p2 <= "1" when (source1_reg_1165 = result_18_reg_1178) else "0";
    grp_fu_347_p4 <= memory_q0(31 downto 16);
    grp_fu_357_p2 <= "1" when (offset_1_fu_814_p2 = ap_const_lv2_0) else "0";
    grp_fu_362_p2 <= "1" when (offset_1_fu_814_p2 = ap_const_lv2_1) else "0";
    grp_fu_367_p2 <= "1" when (offset_1_fu_814_p2 = ap_const_lv2_2) else "0";
    icmp_ln26_fu_387_p2 <= "1" when (trunc_ln25_fu_383_p1 = ap_const_lv2_0) else "0";
    icmp_ln46_1_fu_620_p2 <= "1" when (op_code_fu_414_p1 = ap_const_lv7_23) else "0";
    icmp_ln46_2_fu_669_p2 <= "1" when (op_code_reg_1123 = ap_const_lv7_37) else "0";
    icmp_ln46_3_fu_674_p2 <= "1" when (op_code_reg_1123 = ap_const_lv7_17) else "0";
    icmp_ln46_4_fu_693_p2 <= "1" when (op_code_reg_1123 = ap_const_lv7_3) else "0";
    icmp_ln46_5_fu_698_p2 <= "1" when (op_code_reg_1123 = ap_const_lv7_13) else "0";
    icmp_ln46_6_fu_703_p2 <= "1" when (op_code_reg_1123 = ap_const_lv7_67) else "0";
    icmp_ln46_7_fu_708_p2 <= "1" when (op_code_reg_1123 = ap_const_lv7_73) else "0";
    icmp_ln46_fu_606_p2 <= "1" when (op_code_fu_414_p1 = ap_const_lv7_63) else "0";
    imm_1_fu_498_p3 <= (tmp_1_fu_488_p4 & tmp_s_fu_478_p4);
    imm_2_fu_546_p6 <= ((((tmp_5_fu_538_p3 & tmp_4_fu_530_p3) & tmp_3_fu_520_p4) & tmp_2_fu_510_p4) & ap_const_lv1_0);
    imm_3_fu_658_p3 <= (tmp_fu_648_p4 & ap_const_lv12_0);
    imm_4_fu_592_p6 <= ((((tmp_5_fu_538_p3 & tmp_8_fu_582_p4) & tmp_7_fu_574_p3) & tmp_6_fu_564_p4) & ap_const_lv1_0);
    imm_5_fu_612_p3 <= 
        sext_ln392_1_fu_560_p1 when (icmp_ln46_fu_606_p2(0) = '1') else 
        imm_4_fu_592_p6;
    imm_6_fu_626_p3 <= 
        sext_ln392_fu_506_p1 when (icmp_ln46_1_fu_620_p2(0) = '1') else 
        imm_5_fu_612_p3;
    imm_7_fu_685_p3 <= 
        imm_3_fu_658_p3 when (or_ln46_fu_679_p2(0) = '1') else 
        sext_ln392_2_fu_666_p1;
    imm_8_fu_731_p3 <= 
        sext_ln52_fu_644_p1 when (or_ln46_3_fu_725_p2(0) = '1') else 
        imm_7_fu_685_p3;
    imm_fu_634_p4 <= reg_372(31 downto 20);
    lshr_ln_fu_399_p4 <= g_pc(18 downto 2);
    mem_pos_fu_755_p4 <= add_ln120_fu_749_p2(18 downto 2);

    memory_address0_assign_proc : process(ap_CS_fsm_state1, op_code_reg_1123, ap_CS_fsm_state4, memory_addr_1_reg_1229, ap_CS_fsm_state6, zext_ln29_fu_409_p1, zext_ln122_fu_765_p1, zext_ln173_fu_792_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            memory_address0 <= memory_addr_1_reg_1229;
        elsif (((op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            memory_address0 <= zext_ln173_fu_792_p1(17 - 1 downto 0);
        elsif (((op_code_reg_1123 = ap_const_lv7_3) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            memory_address0 <= zext_ln122_fu_765_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            memory_address0 <= zext_ln29_fu_409_p1(17 - 1 downto 0);
        else 
            memory_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memory_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, op_code_reg_1123, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((op_code_reg_1123 = ap_const_lv7_3) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            memory_ce0 <= ap_const_logic_1;
        else 
            memory_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    memory_d0 <= p_0_0_03053_reg_250;

    memory_we0_assign_proc : process(op_code_reg_1123, ap_CS_fsm_state6)
    begin
        if (((op_code_reg_1123 = ap_const_lv7_23) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            memory_we0 <= ap_const_logic_1;
        else 
            memory_we0 <= ap_const_logic_0;
        end if; 
    end process;

    offset_1_fu_814_p2 <= std_logic_vector(unsigned(trunc_ln120_3_fu_811_p1) + unsigned(trunc_ln120_2_fu_808_p1));
    offset_fu_995_p2 <= std_logic_vector(unsigned(trunc_ln171_3_fu_992_p1) + unsigned(trunc_ln171_2_fu_989_p1));
    op_code_fu_414_p1 <= memory_q0(7 - 1 downto 0);
    or_ln125_fu_957_p2 <= (grp_fu_367_p2 or grp_fu_362_p2);
    or_ln146_fu_877_p2 <= (grp_fu_367_p2 or grp_fu_362_p2);
    or_ln46_1_fu_713_p2 <= (icmp_ln46_5_fu_698_p2 or icmp_ln46_4_fu_693_p2);
    or_ln46_2_fu_719_p2 <= (icmp_ln46_7_fu_708_p2 or icmp_ln46_6_fu_703_p2);
    or_ln46_3_fu_725_p2 <= (or_ln46_2_fu_719_p2 or or_ln46_1_fu_713_p2);
    or_ln46_fu_679_p2 <= (icmp_ln46_3_fu_674_p2 or icmp_ln46_2_fu_669_p2);
    result_10_fu_1046_p5 <= (memory_q0(31 downto 16) & trunc_ln177_fu_1031_p1 & memory_q0(7 downto 0));
    result_11_fu_1034_p5 <= (memory_q0(31 downto 24) & trunc_ln177_fu_1031_p1 & memory_q0(15 downto 0));
    result_12_fu_1019_p5 <= (memory_q0(31 downto 16) & trunc_ln188_fu_1016_p1);
    result_13_fu_1004_p5 <= (trunc_ln190_fu_1001_p1 & memory_q0(15 downto 0));
    result_14_fu_907_p1 <= memory_q0(16 - 1 downto 0);
    result_16_fu_827_p1 <= memory_q0(16 - 1 downto 0);
    result_5_fu_971_p3 <= 
        select_ln125_fu_949_p3 when (or_ln125_fu_957_p2(0) = '1') else 
        select_ln125_1_fu_963_p3;
    result_6_fu_891_p3 <= 
        select_ln146_fu_869_p3 when (or_ln146_fu_877_p2(0) = '1') else 
        select_ln146_1_fu_883_p3;
    result_8_fu_1070_p5 <= (trunc_ln177_fu_1031_p1 & memory_q0(23 downto 0));
    result_9_fu_1058_p5 <= (memory_q0(31 downto 8) & trunc_ln177_fu_1031_p1);
    rs1_fu_448_p4 <= memory_q0(19 downto 15);
    rs2_fu_458_p4 <= memory_q0(24 downto 20);
    select_ln125_1_fu_963_p3 <= 
        trunc_ln126_fu_925_p1 when (grp_fu_357_p2(0) = '1') else 
        tmp_9_fu_915_p4;
    select_ln125_fu_949_p3 <= 
        tmp_11_fu_939_p4 when (grp_fu_367_p2(0) = '1') else 
        tmp_10_fu_929_p4;
    select_ln146_1_fu_883_p3 <= 
        trunc_ln147_fu_845_p1 when (grp_fu_357_p2(0) = '1') else 
        tmp_12_fu_835_p4;
    select_ln146_fu_869_p3 <= 
        tmp_14_fu_859_p4 when (grp_fu_367_p2(0) = '1') else 
        tmp_13_fu_849_p4;
        sext_ln130_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_5_fu_971_p3),32));

        sext_ln137_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_14_fu_907_p1),32));

        sext_ln139_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_347_p4),32));

        sext_ln392_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm_2_fu_546_p6),21));

        sext_ln392_2_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm_6_reg_1160),32));

        sext_ln392_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm_1_fu_498_p3),21));

        sext_ln52_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm_fu_634_p4),32));

    tmp_10_fu_929_p4 <= memory_q0(15 downto 8);
    tmp_11_fu_939_p4 <= memory_q0(23 downto 16);
    tmp_12_fu_835_p4 <= memory_q0(31 downto 24);
    tmp_13_fu_849_p4 <= memory_q0(15 downto 8);
    tmp_14_fu_859_p4 <= memory_q0(23 downto 16);
    tmp_1_fu_488_p4 <= memory_q0(31 downto 25);
    tmp_2_fu_510_p4 <= memory_q0(11 downto 8);
    tmp_3_fu_520_p4 <= memory_q0(30 downto 25);
    tmp_4_fu_530_p3 <= memory_q0(7 downto 7);
    tmp_5_fu_538_p3 <= memory_q0(31 downto 31);
    tmp_6_fu_564_p4 <= memory_q0(30 downto 21);
    tmp_7_fu_574_p3 <= memory_q0(20 downto 20);
    tmp_8_fu_582_p4 <= memory_q0(19 downto 12);
    tmp_9_fu_915_p4 <= memory_q0(31 downto 24);
    tmp_fu_648_p4 <= reg_372(31 downto 12);
    tmp_s_fu_478_p4 <= memory_q0(11 downto 7);
    trunc_ln120_1_fu_746_p1 <= imm_8_reg_1190(19 - 1 downto 0);
    trunc_ln120_2_fu_808_p1 <= source1_reg_1165(2 - 1 downto 0);
    trunc_ln120_3_fu_811_p1 <= imm_8_reg_1190(2 - 1 downto 0);
    trunc_ln120_fu_743_p1 <= source1_reg_1165(19 - 1 downto 0);
    trunc_ln126_fu_925_p1 <= memory_q0(8 - 1 downto 0);
    trunc_ln147_fu_845_p1 <= memory_q0(8 - 1 downto 0);
    trunc_ln171_1_fu_773_p1 <= imm_8_reg_1190(19 - 1 downto 0);
    trunc_ln171_2_fu_989_p1 <= source1_reg_1165(2 - 1 downto 0);
    trunc_ln171_3_fu_992_p1 <= imm_8_reg_1190(2 - 1 downto 0);
    trunc_ln171_fu_770_p1 <= source1_reg_1165(19 - 1 downto 0);
    trunc_ln177_fu_1031_p1 <= result_18_reg_1178(8 - 1 downto 0);
    trunc_ln188_fu_1016_p1 <= result_18_reg_1178(16 - 1 downto 0);
    trunc_ln190_fu_1001_p1 <= result_18_reg_1178(16 - 1 downto 0);
    trunc_ln25_fu_383_p1 <= g_pc(2 - 1 downto 0);
    write_addr_fu_782_p4 <= add_ln171_fu_776_p2(18 downto 2);
    zext_ln122_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_pos_fu_755_p4),64));
    zext_ln151_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_6_fu_891_p3),32));
    zext_ln158_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_16_fu_827_p1),32));
    zext_ln160_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_347_p4),32));
    zext_ln173_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(write_addr_fu_782_p4),64));
    zext_ln29_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_399_p4),64));
    zext_ln372_1_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_1144),64));
    zext_ln372_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_1144),64));
    zext_ln42_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_fu_448_p4),64));
    zext_ln43_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs2_fu_458_p4),64));
end behav;
